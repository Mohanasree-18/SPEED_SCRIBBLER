THIS PROJECT IS MAINLY FRONTEND BASED USES HTML CSS AND JS

this project uses WPM(words per minute). i.e it will calculate number of words typed per minute

**BASICALLY THIS GAME WILL DISPLAY YOU A SENTENCE TO TYPE TO CALCULATE WPM AND IT WILL CALCULATE YOUR ACCURACY BASED ON YOUR TYPING IT 
 *IT WILL CROSS CHECK WITH THE FIRST GIVEN SENTENCE ON THE SCREEN

         <PROJECT FILES AND FOLDERS>
1.create error.mp3 file to play sound when you enter wrong words
2.create one index.html file
3.create script.js file for javascript
4.create one style.css file for css styling
5.open index.html and write code into it

*<script.js> file
1.before writing any code into it make sure all html and css content are loaded 
   for that add eventlistener 
2.inorder to view anything on hows our app working open index.html and save it and open with live server
3.lets understand code 

/document.addEventListener("DOMContentLoaded", () => {
   this make sure that all contents are loaded 

/const textToTypeElement=document.getElementById('text-to-type');
/const typingInputElement = document.getElementById("typing-input");
/const speedElement = document.getElementById("speed");
/const accuracyElement = document.getElementById("accuracy");
   These lines retreive elements based on the given 4 idsin the ' ' to operate them to develop GAME
   here we retreived  textToTypeElement-gives text to user to type
                      typingInputElement-takes the user input
                      accuracyElement-accuracy we finally calculate
                      speedElement-this calculates speed

/ const sampleTexts=["you","me","when","They"];
   these are texts to be displayed randomly

/let currentIndex=0;
/let startTime=new Date();
/ let errors=0;
   currentIndex keeps track of the current position in the text that the user is typing.
   startTime records the time when the user starts typing.
   errors keeps count of how many typing errors the user makes.

lets explore functions 

*Function to initialise or restart the game
/function initializeGame() {
    const text = sampleTexts[Math.floor(Math.random() * sampleTexts.length)];
    textToTypeElement.textContent = text;
    typingInputElement.value="";
    currentIndex = 0;
    startTime = new Date();
    errors = 0;
    updateFeedback();
/
   Randomly selects a text from sampleTexts.
   Sets the selected text as the content to type.
   Clears the typing input field.
   Resets the current typing index to 0.
   Records the current time as the start time.
   Resets the error count to 0.

*Function to update the speed and the accuracy feedback
/ const currentTime = new Date();
    const elapsedTime = (currentTime - startTime) / 60000;
    if (elapsedTime <= 0) {
      speedElement.textContent = 0;
    } else {
      const wordsTyped = typingInputElement.value.trim().split(/\s+/).length;
      const speed = Math.round(wordsTyped / elapsedTime);
      speedElement.textContent = speed;
    }
    //calculate accuracy
    const accuracy =
      currentIndex > 0
        ? Math.round(((currentInder - errors) / currentIndex) * 100)
        : 100;
    accuracyElement.textContent = accuracy;
  }
/
   currentTime: This creates a new Date object representing the current date and time when the function is called. It's used to measure how much time has passed since the user started typing
   elapsedTime: This calculates the elapsed time in minutes by subtracting the startTime (when the game started) from the currentTime and then dividing by 60000 (milliseconds in a minute). This helps in calculating typing speed in words per minute (WPM).
   if (elapsedTime <= 0): Checks if the elapsed time is zero or negative (which should not happen, but is a safety check).
   speedElement.textContent = 0: Sets the speed display to 0 if elapsed time is zero.
   wordsTyped: Counts the number of words typed by the user. typingInputElement.value gets the current text in the input field, .trim() removes leading and trailing spaces, and .split(/\s+/) splits the text into words based on spaces.
   speed: Calculates the typing speed by dividing the number of words typed by the elapsed time and rounding it to the nearest integer.
   speedElement.textContent = speed: Updates the displayed speed with the calculated value.
   This is a ternary expression that calculates the accuracy. If currentIndex is greater than 0, the accuracy is calculated as the number of correct answers (current index minus the number of errors) divided by the total number of questions (current index), multiplied by 100 to get a percentage. If currentIndex is 0, the accuracy is set to 100%.
   This rounds the accuracy to two decimal places.
   *The elapsed time refers to the amount of time that has passed between two specific moments
   The "elapsed time" in this code signifies the total duration you've spent typing since the starting point (startTime). This duration is then used to calculate your typing speed in words per minute.

   By default we display accuracy 100.nut to claculate exact accuracy we need to find errors
   finding errors is our next functionality


*Function to check typed character
Here we just check entered char matches with the given text if yes return true if no play error sound and return flase

*Function to display messages
This function shows a message for 3 seconds. Here's the ultra-short version:
 Takes a message as input.
 Shows the message on screen (`message-area`).
 Clears the message after 3 seconds.


*Event listener for typing input -at the beginning stage
/typingInputElement.addEventListener('input',(e)=>{
/  updateFeedback();
   this snippet represnts that whenever user interacts with 'starttyping' button some events will be triggered
   one such function is updateFeedback() i.e if user enter correct  text as given color will get change to green
   and if anything goes wrong color changes to red and error sound will be played

*Event listener for typing input -at the final stage
/typingInputElement.addEventListener("input", (e) => {
    const typedText = typingInputElement.value;
    const targetText = textToTypeElement.textContent;
    if (currentIndex < targetText.length) {
      const isCorrect = checkCharacter(
        typedText[currentIndex],
        targetText[currentIndex]
      );
      //using css to display green if entered text is corr or else red dynamically
      textToTypeElement.innerHTML =
        targetText.substring(0, currentIndex) +
        `<span class='${isCorrect ? "correct" : "incorrect"}'>${
          targetText[currentIndex]
        }</span>` +
        targetText.substring(currentIndex + 1);
      currentIndex++;
      if (currentIndex === targetText.length) {
        displayMessage("Test completed starting a new one.");
        initializeGame();
      }
    }
   /
   115:Listens for "input" events (user typing) on typingInputElement
   116:Stores the current value of typingInputElement (typed text) in typedText
   117:Stores the text content of textToTypeElement (target text) in targetText
   118:Checks if currentIndex (user's position) is less than the target text length (ensures code processes valid characters).
   119-129:
      Calls checkCharacter (not shown) to compare characters.
      Updates textToTypeElement content dynamically:
      Shows target text up to current position.
      Wraps current character in a <span> with a class based on isCorrect (likely "correct" or "incorrect" for color).
      Shows remaining target text after the current character.
   130: Increases currentIndex by 1 (tracks user's typing progress).
   131-133:
   Checks if currentIndex reaches target text length (user finished typing).
   Calls displayMessage (not shown) to show a completion message.
   Calls initializeGame (not shown) to restart the game.
